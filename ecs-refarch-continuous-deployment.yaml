---
AWSTemplateFormatVersion: 2010-09-09


Description: >
  This template shows how to use AWS CodePipeline and AWS CodeBuild to build an
  automated continuous deployment pipeline to Amazon Elastic Container Service
  (Amazon ECS) using clusters powered by AWS Fargate or Amazon Elastic Compute
  Cloud (Amazon EC2).


Parameters:
  VpcId:
    Type: String
    Description: The Vpc Id.

  SubnetId1:
    Type: String
    Description: The subnet Id in AZ-a.

  SubnetId2:
    Type: String
    Description: The subnet Id in AZ-c.

  LaunchType:
    Type: String
    Default: Fargate
    AllowedValues:
      - Fargate
      - EC2
    Description: >
      The launch type for your service. Selecting EC2 will create an Auto
      Scaling group of t2.micro instances for your cluster. See
      https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html
      to learn more about launch types.

  GitRepo:
    Type: String
    Default: python-flask-hello
    Description: The repository name of the service.

  GitBranch:
    Type: String
    Default: master
    Description: The branch of the repository to continuously deploy.

  TemplateBucket:
    Type: String
    Default: cfn-python-flask-hello-continuous-deployment
    Description: >
      The S3 bucket from which to fetch the templates used by this stack.


Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      GitRepo:
        default: "Repo"
      GitBranch:
        default: "Branch"
      LaunchType:
        default: "Launch Type"
    ParameterGroups:
      - Label:
          default: Cluster Configuration
        Parameters:
          - LaunchType
      - Label:
          default: Git Configuration
        Parameters:
          - GitRepo
          - GitBranch
      - Label:
          default: Stack Configuration
        Parameters:
          - TemplateBucket


Resources:
  LoadBalancer:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${TemplateBucket}/templates/load-balancer.yaml"
      Parameters:
        LaunchType: !Ref LaunchType
        Subnets: !Join [ ",", [ !Ref SubnetId1, !Ref SubnetId2 ] ]
        VpcId: !Ref VpcId

  Cluster:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${TemplateBucket}/templates/ecs-cluster.yaml"
      Parameters:
        LaunchType: !Ref LaunchType
        SourceSecurityGroup: !GetAtt LoadBalancer.Outputs.SecurityGroup
        Subnets: !Join [ ",", [ !Ref SubnetId1, !Ref SubnetId2 ] ]
        VpcId: !Ref VpcId

  Service:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${TemplateBucket}/templates/service.yaml"
      Parameters:
        Cluster: !GetAtt Cluster.Outputs.ClusterName
        LaunchType: !Ref LaunchType
        TargetGroup: !GetAtt LoadBalancer.Outputs.TargetGroup
        SourceSecurityGroup: !GetAtt LoadBalancer.Outputs.SecurityGroup
        Subnets: !Join [ ",", [ !Ref SubnetId1, !Ref SubnetId2 ] ]

  DeploymentPipeline:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${TemplateBucket}/templates/deployment-pipeline.yaml"
      Parameters:
        Cluster: !GetAtt Cluster.Outputs.ClusterName
        Service: !GetAtt Service.Outputs.Service
        GitRepo: !Ref GitRepo
        GitBranch: !Ref GitBranch


Outputs:
  ServiceUrl:
    Description: The sample service that is being continuously deployed.
    Value: !GetAtt LoadBalancer.Outputs.ServiceUrl

  PipelineUrl:
    Description: The continuous deployment pipeline in the AWS Management Console.
    Value: !GetAtt DeploymentPipeline.Outputs.PipelineUrl
